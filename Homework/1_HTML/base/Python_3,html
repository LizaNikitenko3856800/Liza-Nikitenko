<!DOCTYPE html> 
 <HTML> 
     <HEAD>
         <META charset="utf-8">
            <TITLE>Часть 3</TITLE>
        </HEAD> 

        <BODY leftmargin="140">
            <H1>HOW-TO: Программа на Python, Часть 3</H1> 
            <i>
             <ul>
                 <li> Програмам на Python — часть 1 </li>
                 <li> Программа на Python — часть 2 </li>
                 <li> Прогпамма на Python — часть 3 </li>
             </ul>   
            </i>
            <H2>Содержание</H2>
                <H3> HOW-TO: Программа на Python, Часть3 </H3>
                <ul>
                 <INS>
                     <li>Модули</li> 
                     <li>Функции</li> 
                    </INS>   
                </ul>
                <hr align="left" width="600" size="2" color="#b0b0b0" />
                <p>В прошлый раз мы изучали списки, подстановку переменных, комментарии, сравнение и<br>
                    присвоение, операторы <STRONG>if</STRONG> и <STRONG>while</STRONG>. Я обещал, что в этой части мы изучим модули и<br>
                    функции. Давайте начнём.</p>
            <H2>Модули</H2> 
            <p>Модули предлагают способ расширить программирование на Python. Вы можете создать<br>
                свои модули, использовать те, которые поставляются с Python или которые написали<br>
                другие. В самом Python есть сотни модулей, которые облегчают написание программ.<br>
                Список модулей, поставляемых с Python, находится по адресу:<br>
                <EM><INS>http://docs.python.org/modindex.html</INS></EM>. Некоторые модули предназначены для определённых<br>
                операционных систем, но большинство из них кроссплатформенные и работают<br>
                одинаково на <INS>Linux</INS>, <INS>Mac</INS> и <INS>Microsoft Windows</INS>. Для использования внешнего модуля<br>
                необходимо импортировать его в программу. Один из модулей, поставляемых с Python,<br>
                называется «random». Он даёт возможность генерировать псевдослучайные числа. Мы<br>
                используем этот модуль в нашем первом примере.</p>
                <p><CODE>#=======================================<br>
                    # random_example.py<br>
                    # Module example using the random module<br>
                    #=======================================<br>
                    import random<br>
                    # print 14 random integers<br>
                    for cntr in range(1,15):<br>
                    print random.randint(1,10)</CODE></p>
                <p>Давайте разберём код по строкам. Первые четыре строки — это комментарии, о которых<br>
                    мы говорили в прошлый раз. Пятая строка говорит Python, что нужно использовать<br>
                    модуль «random». Мы должны явно указать Python на это.</p>    
                    <hr align="left" width="600" size="2" color="#b0b0b0" />
                    <H2>Функции</H2>    
                    <p>Когда мы импортировали модуль random, мы использовали функцию <STRONG>randint()</STRONG>. Функция<br>
                        — это блок кода, который создан для того, чтобы вызывать его в программе, обычно,<br>
                        более одного раза. Это упрощает работу над программой и предотвращает набор одного и<br>
                        того же кода снова и снова. Грубо говоря, если вам нужно написать некоторый код<br>
                        больше, чем 1-2 раза, стоит сделать его функцией. Хотя следующие два примера очень<br>
                        простые, это хорошие примеры функций. Теперь мы хотим, скажем, взять два числа,<br>
                        сложить их, перемножить, вычесть одно из другого, затем вывести на экран эти числа и<br>
                        результаты одновременно. Допустим, нам нужно сделать это три раза для трёх наборов<br>
                        чисел. Тогда наш пример будет выглядеть как код ниже.</p> 
                    <p><CODE>#silly example<br>
                        print '%d + %d = %d ' % (1,2,1+2)<br>
                        print '%d * %d = %d ' % (1,2,1*2)<br>
                        print '%d - %d = %d ' % (1,2,1-2)<br>
                        print '\n'<br>
                        print '%d + %d = %d ' % (1,4,1+4)<br>
                        print '%d * %d = %d ' % (1,4,1*4)<br>
                        print '%d - %d = %d ' % (1,4,1-4)<br>
                        print '\n'<br>
                        print '%d + %d = %d ' % (10,5,10+5)<br>
                        print '%d * %d = %d ' % (10,5,10*5)<br>
                        print '%d - %d = %d ' % (10,5,10-5)<br>
                        print '\n'</CODE></p>  
                    <p>Здесь нужно не только набрать много текста, но и непременно возникнут ошибки как при<br>
                        написании, так и при внесении изменений. Вместо этого мы создадим функцию, которую<br>
                        назовём <STRONG><EM>«DoTwo»</EM></STRONG>. Она будет каждый раз брать два числа, проводить математические<br>
                        операции и выводить результат. Начнём с ключевого слова <STRONG><EM>«def»</EM></STRONG>, которое сигнализирует<br>
                        о том, что мы собираемся определить функцию. После слова <STRONG><EM>«def»</EM></STRONG> добавим название<br>
                        функции и список параметров, если таковые имеются, в круглых скобках. Эту строку<br>
                        необходимо завершить двоеточием. Код функции набирается с отступом. Наш<br>
                        улучшенный простой пример (<INS>№2</INS>) показан ниже.</p>  
                    <p><CODE>#silly example 2...still silly, but better<br>
                        def DoTwo(num1,num2):<br>
                        print '%d + %d = %d ' % (num1,num2,num1+num2)<br>
                        print '%d * %d = %d ' % (num1,num2,num1*num2)<br>
                        print '%d - %d = %d ' % (num1,num2,num1-num2)<br>
                        print '\n'<br>
                        DoTwo(1,2)<br>
                        DoTwo(1,4)<br>
                        DoTwo(10,5)</CODE></p> <br>
                    <p>Как видите, здесь написано меньше кода — 8 строк вместо 12. Если нам нужно будет что-<br>
                        либо поменять в функции, мы сможем сделать это, не создавая проблем для нашей<br>
                        программы. Чтобы вызвать функцию, нужно написать её имя и параметры.</p>  
        </BODY>
 </HTML>                            

